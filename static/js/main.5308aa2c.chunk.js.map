{"version":3,"sources":["components/AboutMe.js","components/Contact.js","components/Home.js","components/ContentRouter.js","App.js","serviceWorker.js","index.js"],"names":["AboutMe","className","Component","Contact","href","rel","target","Home","src","alt","ContentRouter","exact","path","component","App","fixedHeader","transparent","style","WebkitBoxShadow","MozBoxShadow","boxShadow","title","to","color","opacity","scroll","fontSize","textDecoration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAwBeA,E,uKApBP,OACI,yBAAKC,UAAU,gBACX,0CAGA,sxBAMA,md,GAbMC,aCmBPC,E,uKAjBP,OAEI,yBAAKF,UAAY,gBACT,yBAAKA,UAAU,gBACX,qEACI,wHAIR,uBAAGG,KAAK,6CAA6CC,IAAI,sBAAsBC,OAAO,UAClF,uBAAGL,UAAU,qBAAb,c,GAZFC,aC+BPK,E,uKA5BP,OACI,6BACQ,yBAAKC,IAAM,SACPC,IAAM,SACNR,UAAY,eACZ,yBAAKA,UAAU,eACX,kDACA,kHAEJ,yBAAKA,UAAY,gBACjB,uBAAGG,KAAO,8CAA8CC,IAAI,sBAAsBC,OAAO,UACrF,uBAAGL,UAAU,yBAAb,SAGJ,uBAAGG,KAAO,kCAAkCC,IAAI,sBAAsBC,OAAO,UACzE,uBAAGL,UAAU,uBAAb,SAGJ,uBAAGG,KAAO,mCAAmCC,IAAI,sBAAsBC,OAAO,UAC1E,uBAAGL,UAAU,gBAAb,e,GAtBTC,aCwBJQ,E,uKAhBP,OACI,kBAAC,aAAD,KACI,6BACA,kBAAC,QAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAaN,IAE/B,kBAAC,QAAD,CAAOK,KAAK,YAAYC,UAAab,IAErC,kBAAC,QAAD,CAAOY,KAAK,YAAYC,UAAaV,U,GAX7BD,a,wBC4CbY,E,uKApCX,OACE,yBAAKb,UAAU,oBACb,kBAAC,SAAD,CAAQc,aAAW,EAACd,UAAU,qBAE5B,kBAAC,SAAD,CAAQe,aAAW,EAACC,MAAO,CAACC,gBAAgB,uBAAwBC,aAAa,uBAAwBC,UAAU,wBAAyBC,MAAO,kBAAC,aAAD,KAAY,kBAAC,WAAD,CAAUC,GAAG,IAAIL,MAAO,CAACM,MAAM,UAAWC,QAAQ,KAAlD,wBAAiGC,QAAM,GACpQ,kBAAC,aAAD,KACA,kBAAC,aAAD,KACM,kBAAC,WAAD,CAAUR,MAAO,CAACM,MAAM,UAAWG,SAAS,QAASJ,GAAG,aAAxD,iBACA,kBAAC,WAAD,CAAUL,MAAO,CAACM,MAAM,UAAWG,SAAS,QAASJ,GAAG,aAAxD,yBAMN,kBAAC,SAAD,CAAQP,aAAW,EAACd,UAAW,mBAAoBoB,MAAO,kBAAC,aAAD,KAAY,kBAAC,WAAD,CAAUJ,MAAO,CAACU,eAAgB,OAAQJ,MAAO,WAAYD,GAAG,KAAhE,yBACtE,kBAAC,aAAD,KACA,kBAAC,aAAD,KACM,kBAAC,WAAD,CAAUL,MAAO,CAACM,MAAM,UAAWG,SAAS,QAASJ,GAAG,aAAxD,iBACA,kBAAC,WAAD,CAAUL,MAAO,CAACM,MAAM,UAAWG,SAAS,QAASJ,GAAG,aAAxD,yBAIV,kBAAC,UAAD,KACI,kBAAC,EAAD,OAGJ,yBAAKrB,UAAU,oCAAoCgB,MAAO,CAAEM,MAAM,YAChE,6D,GA9BQrB,aCCE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,aAAD,KACA,kBAAC,EAAD,QAIFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5308aa2c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass AboutMe extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"content-page\">\r\n                <h1>\r\n                    Ben kimim?\r\n                </h1>\r\n                <p>\r\n                    Merhaba, Kocaeli Üniversitesi Bilgisayar Mühendisliği'17 mezunuyum. Özel sektörde Yazılım Geliştirme Uzmanı olarak görev almaktayım. \r\n                    Yeni teknolojileri ve metodolojileri takip etmeye çalışan, temiz kod yazmayı kendisine ilke edinmiş birisiyim. Kendimi kısaca, problem çözmekten keyif alan,\r\n                     analitik düşünebilen, karşılaştığım problemler için en iyi ve en efektif çözüm yollarını bulmayı amaçlayan bir problem çözücü olarak tanımlayabilirim.\r\n                     Öğrenmeyi seviyorum, öğrendiklerimi uygulamak için sabırsızlanıyorum ve kişisel gelişime önem veriyorum.                   \r\n                </p>\r\n                <p>\r\n                    Uzmanlık alanım olarak, profesyonel iş hayatımda çoğunlukla C#/.net kullanıyorum. Kendimi backend developer olarak tanımlasam da, yazılımcılığın programlama\r\n                     dillerinden bağımsız olduğunu düşünüyorum. Frontend'e ve JavaScript'e ilgi duyuyorum. Veritabanı olarak MSSql, MySql, Oracle ve Postgre tecrübem bulunmaktadır. \r\n                </p>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutMe;","import React, {Component} from 'react';\r\n\r\nclass Contact extends Component{\r\n    render(){\r\n        return (\r\n\r\n            <div className = \"social-links\">\r\n                    <div className=\"content-page\">\r\n                        <h1>Bana nasıl ulaşabilirsiniz?</h1>\r\n                            <p>\r\n                                Bana aşağıdaki ikon'a tıklayarak mail yolu ile ulaşabilirsiniz.\r\n                                </p>                         \r\n                    </div> \r\n                    <a href=\"mailto:yilmazmertcannn@gmail.com@gmail.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        <i className=\"fa fa-paper-plane\" >    </i>\r\n                    </a> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>                                      \r\n                    <img src = \"pp.png\"\r\n                        alt = \"avatar\"\r\n                        className = \"avatar-img\"/>\r\n                        <div className=\"banner-text\">\r\n                            <h1>Software Developer</h1>                         \r\n                            <p>C# | .NET | C / C++ | JavaScript | HTML / CSS / Bootstrap | SQL | Oracle | MongoDB</p>\r\n                        </div>  \r\n                        <div className = \"social-links\">\r\n                        <a href = \"https://www.linkedin.com/in/mertcan-yilmaz/\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i className=\"fa fa-linkedin-square\" >    </i>\r\n                        </a> \r\n\r\n                        <a href = \"https://github.com/mertcnyilmaz\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i className=\"fa fa-github-square\" >    </i>\r\n                        </a> \r\n\r\n                        <a href = \"https://medium.com/@mertcnyilmaz\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i className=\"fa fa-medium\" >    </i>\r\n                        </a> \r\n                        </div>\r\n         \r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport {Route, HashRouter} from 'react-router-dom';\r\nimport AboutMe from './AboutMe.js';\r\nimport Contact from './Contact.js';\r\nimport Home from './Home.js';\r\n\r\nclass ContentRouter extends Component{\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <HashRouter >\r\n                <div>\r\n                <Route exact path=\"/\" component = {Home}/>\r\n\r\n                    <Route path=\"/hakkimda\" component = {AboutMe}/>\r\n   \r\n                    <Route path=\"/iletisim\" component = {Contact}/>\r\n\r\n                </div>\r\n\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentRouter;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\r\nimport { HashRouter} from 'react-router-dom';\r\nimport ContentRouter from './components/ContentRouter.js';\r\nimport './index.css';\r\nimport 'react-mdl/extra/material.css';\r\nimport 'react-mdl/extra/material.js';\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\n\r\nclass App extends Component {\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"demo-big-content\">\r\n        <Layout fixedHeader className=\"background-layout\">\r\n\r\n          <Header transparent style={{WebkitBoxShadow:'0 8px 6px -6px black', MozBoxShadow:'0 8px 6px -6px black', boxShadow:'0 8px 6px -6px black'}} title={<HashRouter><HashLink to=\"/\" style={{color:'#454545', opacity:.8}} >Mertcan Yılmaz</HashLink></HashRouter>}  scroll>\r\n            <HashRouter>\r\n            <Navigation>\r\n                  <HashLink style={{color:'#454545', fontSize:'16px'}} to=\"/hakkimda\">Hakkımda</HashLink>\r\n                  <HashLink style={{color:'#454545', fontSize:'16px'}} to=\"/iletisim\">İletişim</HashLink>\r\n              </Navigation>\r\n            </HashRouter>\r\n\r\n \r\n            </Header>\r\n            <Drawer fixedHeader className= \"mdl-layout-title\"  title={<HashRouter><HashLink style={{textDecoration: 'none', color: '#454545'}} to=\"/\">Mertcan Yılmaz</HashLink></HashRouter>}>\r\n            <HashRouter>\r\n            <Navigation>\r\n                  <HashLink style={{color:'#454545', fontSize:'16px'}} to=\"/hakkimda\">Hakkımda</HashLink>\r\n                  <HashLink style={{color:'#454545', fontSize:'16px'}} to=\"/iletisim\">İletişim</HashLink>\r\n              </Navigation>\r\n            </HashRouter>\r\n              </Drawer>\r\n        <Content>           \r\n            <ContentRouter/>\r\n        </Content>\r\n\r\n        <div className=\"footer-copyright text-center py-3\" style={{ color:'#454545'}}>\r\n          <small>&copy; Copyright 2020</small>\r\n        </div>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n    <App />\r\n    </HashRouter>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}